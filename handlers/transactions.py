from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from keyboards import income_categories_kb, expense_categories_kb, main_menu
from keyboards.expense_categories import get_expense_categories_inline_keyboard, EXPENSE_CATEGORIES
from keyboards.income_categories import get_income_categories_inline_keyboard, INCOME_CATEGORIES
from keyboards.goals import get_goals_inline_keyboard, get_deposit_quick_inline_kb
from db import DB_PATH
import aiosqlite
from .states import AddTransaction, GoalDepositStates

router = Router()

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
async def add_income_start(message: Message, state: FSMContext):
    await state.update_data(type="income")
    kb = get_income_categories_inline_keyboard()
    await state.set_state(AddTransaction.category)
    await message.answer("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=kb)

@router.message(F.text == "‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def add_expense_start(message: Message, state: FSMContext):
    await state.update_data(type="expense")
    kb = get_expense_categories_inline_keyboard()
    await state.set_state(AddTransaction.category)
    await message.answer("üí∏ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=kb)

@router.message(AddTransaction.amount)
async def save_transaction(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    data = await state.get_data()
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO transactions (user_id, amount, category, type) VALUES (?, ?, ?, ?)",
            (user_id, amount, data["category"], data["type"])
        )
        await db.commit()
    await state.clear()
    await message.answer("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu)

    # --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª–∏ ---
    if data["type"] == "income":
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT id, goal_name, target_amount, current_amount, deadline, period, strategy_value FROM goals WHERE user_id=?", (user_id,))
            goals = await cursor.fetchall()
        if not goals:
            return
        from datetime import datetime
        today = datetime.now().date()
        offers = []
        for goal in goals:
            goal_id, name, target, current, deadline, period, strategy_value = goal
            deadline = datetime.strptime(deadline, "%Y-%m-%d").date()
            if current >= target:
                continue
            left = max(0, target - current)
            period_l = (period or '').lower()
            if period_l == "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ":
                days_left = (deadline - today).days
                rec = round(left / days_left, 2) if days_left > 0 else left
            elif period_l == "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ":
                weeks_left = max(1, (deadline - today).days // 7)
                rec = round(left / weeks_left, 2)
            else:  # –µ–∂–µ–º–µ—Å—è—á–Ω–æ
                months_left = max(1, (deadline.year - today.year) * 12 + (deadline.month - today.month))
                rec = round(left / months_left, 2)
            if rec > 0:
                offers.append((goal_id, name, rec, left))
        if offers:
            kb = get_goals_inline_keyboard([name for _, name, _, _ in offers])
            text = "üéØ –£ –≤–∞—Å –µ—Å—Ç—å —Ü–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å —ç—Ç–æ–≥–æ –¥–æ—Ö–æ–¥–∞:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'."
            await state.set_state(GoalDepositStates.waiting_for_goal)
            await state.update_data(goal_offers=offers)
            await message.answer(text, reply_markup=kb)

@router.message(GoalDepositStates.waiting_for_goal)
async def choose_goal_to_deposit(message: Message, state: FSMContext):
    if message.text.lower() == "–Ω–µ—Ç":
        await state.clear()
        await message.answer("üëå –•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª—å ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ —Ü–µ–ª–µ–π.", reply_markup=main_menu)
        return
    offers = (await state.get_data()).get("goal_offers", [])
    goal_names = [name for _, name, _, _ in offers]
    if message.text not in goal_names:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ –∏–ª–∏ '–ù–µ—Ç'.")
        return
    await state.update_data(selected_goal=message.text)
    # –ù–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
    rec = None
    for _, name, rec_val, _ in offers:
        if name == message.text:
            rec = rec_val
            break
    await state.set_state(GoalDepositStates.waiting_for_amount)
    await message.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ <b>{message.text}</b> (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º: {rec:.2f}‚ÇΩ):", parse_mode="HTML")

@router.message(GoalDepositStates.waiting_for_amount)
async def deposit_goal_amount(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    try:
        value = float(message.text.replace(",", "."))
        if value <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
        return
    data = await state.get_data()
    user_id = message.from_user.id
    goal_name = data.get("selected_goal")
    # –ù–∞–π—Ç–∏ goal_id
    offers = data.get("goal_offers", [])
    goal_id = None
    for gid, name, _, _ in offers:
        if name == goal_name:
            goal_id = gid
            break
    if not goal_id:
        await state.clear()
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu)
        return
    # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE goals SET current_amount = current_amount + ? WHERE id=?", (value, goal_id))
        await db.execute("INSERT INTO goal_deposits (goal_id, user_id, amount, date, source) VALUES (?, ?, ?, DATE('now'), ?) ", (goal_id, user_id, value, "–¥–æ—Ö–æ–¥"))
        await db.commit()
        # –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        cursor = await db.execute("SELECT current_amount, target_amount FROM goals WHERE id=?", (goal_id,))
        current, target = await cursor.fetchone()
    await state.clear()
    percent = min(100, round(current / target * 100, 1))
    bar = "‚ñì" * int(percent // 10) + "‚ñë" * (10 - int(percent // 10))
    await message.answer(f"üéâ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ <b>{goal_name}</b> –Ω–∞ {value:.2f}‚ÇΩ —É—Å–ø–µ—à–Ω–æ!\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {current:.2f}/{target:.2f}‚ÇΩ ({percent}%)\n{bar}", parse_mode="HTML", reply_markup=main_menu)

@router.callback_query(F.data.startswith("expense_cat:"), AddTransaction.category)
async def choose_expense_category(call: CallbackQuery, state: FSMContext):
    code = call.data.split(":", 1)[1]
    category = EXPENSE_CATEGORIES.get(code, code)
    await state.update_data(category=category, type="expense")
    await state.set_state(AddTransaction.amount)
    await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

@router.callback_query(F.data == "expense_cat_cancel", AddTransaction.category)
async def cancel_expense_category(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
async def ask_income_category(message: Message, state: FSMContext):
    categories = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ü–æ–¥–∞—Ä–æ–∫", "–ë–∏–∑–Ω–µ—Å", "–î—Ä—É–≥–æ–µ"]
    kb = get_income_categories_inline_keyboard(categories)
    await state.set_state(AddTransaction.category)
    await message.answer("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=kb)

@router.callback_query(F.data.startswith("income_cat:"), AddTransaction.category)
async def choose_income_category(call: CallbackQuery, state: FSMContext):
    code = call.data.split(":", 1)[1]
    await state.update_data(category=code, type="income")
    await state.set_state(AddTransaction.amount)
    await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

@router.callback_query(F.data == "income_cat_cancel", AddTransaction.category)
async def cancel_income_category(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

# --- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ –ø–æ—Å–ª–µ –¥–æ—Ö–æ–¥–∞ ---
@router.callback_query(F.data.startswith("goal_select:"), GoalDepositStates.waiting_for_goal)
async def choose_goal_to_deposit_callback(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    offers = data.get("goal_offers", [])
    goal_name = call.data.split(":", 1)[1]
    rec = None
    for _, name, rec_val, _ in offers:
        if name == goal_name:
            rec = rec_val
            break
    await state.update_data(selected_goal=goal_name)
    await state.set_state(GoalDepositStates.waiting_for_amount)
    kb = get_deposit_quick_inline_kb(rec)
    await call.message.edit_text(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ <b>{goal_name}</b> –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=kb, parse_mode="HTML")

@router.callback_query(F.data.startswith("deposit:"), GoalDepositStates.waiting_for_amount)
async def deposit_goal_quick_amount(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    goal_name = data.get("selected_goal")
    offers = data.get("goal_offers", [])
    goal_id = None
    for gid, name, _, _ in offers:
        if name == goal_name:
            goal_id = gid
            break
    if not goal_id:
        await state.clear()
        await call.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu)
        return
    value_str = call.data.split(":", 1)[1]
    if value_str == "custom":
        await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ <b>{goal_name}</b>:", parse_mode="HTML")
        return
    try:
        value = float(value_str)
        if value <= 0:
            raise ValueError
    except ValueError:
        await call.message.edit_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
        return
    user_id = call.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE goals SET current_amount = current_amount + ? WHERE id=?", (value, goal_id))
        await db.execute("INSERT INTO goal_deposits (goal_id, user_id, amount, date, source) VALUES (?, ?, ?, DATE('now'), ?) ", (goal_id, user_id, value, "–¥–æ—Ö–æ–¥"))
        await db.commit()
        cursor = await db.execute("SELECT current_amount, target_amount FROM goals WHERE id=?", (goal_id,))
        current, target = await cursor.fetchone()
    await state.clear()
    await call.message.edit_text(f"üéâ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ <b>{goal_name}</b> –Ω–∞ {value:.2f}‚ÇΩ —É—Å–ø–µ—à–Ω–æ!", parse_mode="HTML")

@router.message(GoalDepositStates.waiting_for_amount)
async def deposit_goal_custom_amount(message: Message, state: FSMContext):
    try:
        value = float(message.text.replace(",", "."))
        if value <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
        return
    data = await state.get_data()
    goal_name = data.get("selected_goal")
    offers = data.get("goal_offers", [])
    goal_id = None
    for gid, name, _, _ in offers:
        if name == goal_name:
            goal_id = gid
            break
    if not goal_id:
        await state.clear()
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu)
        return
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE goals SET current_amount = current_amount + ? WHERE id=?", (value, goal_id))
        await db.execute("INSERT INTO goal_deposits (goal_id, user_id, amount, date, source) VALUES (?, ?, ?, DATE('now'), ?) ", (goal_id, user_id, value, "–¥–æ—Ö–æ–¥"))
        await db.commit()
        cursor = await db.execute("SELECT current_amount, target_amount FROM goals WHERE id=?", (goal_id,))
        current, target = await cursor.fetchone()
    await state.clear()
    await message.answer(f"üéâ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ <b>{goal_name}</b> –Ω–∞ {value:.2f}‚ÇΩ —É—Å–ø–µ—à–Ω–æ!", parse_mode="HTML", reply_markup=main_menu) 