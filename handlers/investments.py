from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from keyboards.main_menu import main_menu
from tools.crypto_rates import get_crypto_rates
from tools.stock_movers import get_top_us_movers, get_top_ru_movers
from tools.deposit_parser import get_best_deposits

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
investments_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìà –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"), KeyboardButton(text="üìä –ê–∫—Ü–∏–∏")],
        [KeyboardButton(text="üè¶ –í–∫–ª–∞–¥—ã"), KeyboardButton(text="üìã –û–±—â–∏–π –æ–±–∑–æ—Ä")],
        [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

@router.message(Command("investments"))
@router.message(lambda message: message.text == "üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
async def investments_menu_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
    await message.answer(
        "üìà <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –æ–±–∑–æ—Ä</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
        reply_markup=investments_menu,
        parse_mode="HTML"
    )

@router.message(lambda message: message.text == "üìà –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
async def crypto_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    try:
        crypto_data = get_crypto_rates()
        response = "üìà <b>–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>\n\n"
        
        for crypto in crypto_data:
            response += f"<b>{crypto['name']}</b>\n"
            response += f"üíµ ${crypto['usd']:,.2f}\n"
            response += f"‚ÇΩ {crypto['rub']:,.2f}\n\n"
        
        await message.answer(response, parse_mode="HTML", reply_markup=investments_menu)
    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=investments_menu
        )

@router.message(lambda message: message.text == "üìä –ê–∫—Ü–∏–∏")
async def stocks_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –¥–≤–∏–∂–µ–Ω–∏—è –∞–∫—Ü–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–º –∞–∫—Ü–∏—è–º
        us_tickers = ["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "NVDA", "META", "JPM", "V", "SBUX"]
        us_movers = get_top_us_movers(us_tickers, 5)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –∞–∫—Ü–∏—è–º
        ru_movers = get_top_ru_movers(5)
        
        response = "üìä <b>–¢–æ–ø –¥–≤–∏–∂–µ–Ω–∏—è –∞–∫—Ü–∏–π</b>\n\n"
        
        response += "<b>üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∞–∫—Ü–∏–∏:</b>\n"
        for ticker, change in us_movers:
            emoji = "üü¢" if change > 0 else "üî¥"
            response += f"{emoji} {ticker}: {change:+.2f}%\n"
        
        response += "\n<b>üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏:</b>\n"
        for ticker, change in ru_movers:
            emoji = "üü¢" if change > 0 else "üî¥"
            response += f"{emoji} {ticker}: {change:+.2f}%\n"
        
        await message.answer(response, parse_mode="HTML", reply_markup=investments_menu)
    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ü–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=investments_menu
        )

@router.message(lambda message: message.text == "üè¶ –í–∫–ª–∞–¥—ã")
async def deposits_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ –≤–∫–ª–∞–¥—ã"""
    try:
        deposits = get_best_deposits()
        response = "üè¶ <b>–¢–æ–ø-5 –≤–∫–ª–∞–¥–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ</b>\n\n"
        
        for i, deposit in enumerate(deposits[:5], 1):
            response += f"<b>{i}. {deposit['–ë–∞–Ω–∫']}</b>\n"
            response += f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {deposit['–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å']}\n"
            response += f"‚è≥ –°—Ä–æ–∫: {deposit['–°—Ä–æ–∫']}\n"
            response += f"üí∞ –ú–∏–Ω. —Å—É–º–º–∞: {deposit['–ú–∏–Ω. —Å—É–º–º–∞']}\n\n"
        
        await message.answer(response, parse_mode="HTML", reply_markup=investments_menu)
    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∫–ª–∞–¥–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=investments_menu
        )

@router.message(lambda message: message.text == "üìã –û–±—â–∏–π –æ–±–∑–æ—Ä")
async def overview_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –æ–±–∑–æ—Ä"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        crypto_data = get_crypto_rates()
        us_movers = get_top_us_movers(["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA"], 3)
        ru_movers = get_top_ru_movers(3)
        deposits = get_best_deposits()
        
        response = "üìã <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –æ–±–∑–æ—Ä</b>\n\n"
        
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        response += "üìà <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n"
        for crypto in crypto_data:
            response += f"‚Ä¢ {crypto['name']}: ${crypto['usd']:,.0f} (‚ÇΩ{crypto['rub']:,.0f})\n"
        
        # –¢–æ–ø –∞–∫—Ü–∏–∏
        response += "\nüìä <b>–¢–æ–ø –∞–∫—Ü–∏–∏ –°–®–ê:</b>\n"
        for ticker, change in us_movers:
            emoji = "üü¢" if change > 0 else "üî¥"
            response += f"‚Ä¢ {emoji} {ticker}: {change:+.1f}%\n"
        
        # –¢–æ–ø –≤–∫–ª–∞–¥—ã
        response += "\nüè¶ <b>–õ—É—á—à–∏–µ –≤–∫–ª–∞–¥—ã:</b>\n"
        for i, deposit in enumerate(deposits[:3], 1):
            response += f"‚Ä¢ {i}. {deposit['–ë–∞–Ω–∫']}: {deposit['–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å']}\n"
        
        response += "\nüí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</i>"
        
        await message.answer(response, parse_mode="HTML", reply_markup=investments_menu)
    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–∑–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=investments_menu
        )

@router.message(lambda message: message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu
    ) 