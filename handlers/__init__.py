from aiogram import Router, F
from aiogram.types import Message, InputFile, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards import main_menu, transaction_type_kb, income_categories_kb, expense_categories_kb
from db import DB_PATH
import aiosqlite
from gpt import ask_agent
import logging
import re
import matplotlib.pyplot as plt
import tempfile
import os
from datetime import datetime, timedelta

router = Router()

class AddTransaction(StatesGroup):
    type = State()
    category = State()
    amount = State()

class GoalStates(StatesGroup):
    name = State()
    amount = State()
    deadline = State()

class AskAgentState(StatesGroup):
    waiting_for_question = State()

@router.message(F.text == "/menu")
@router.message(F.text == "–ú–µ–Ω—é")
async def show_menu(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
async def add_income_start(message: Message, state: FSMContext):
    await state.update_data(type="income")
    await state.set_state(AddTransaction.category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=income_categories_kb)

@router.message(F.text == "‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def add_expense_start(message: Message, state: FSMContext):
    await state.update_data(type="expense")
    await state.set_state(AddTransaction.category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=expense_categories_kb)

@router.message(AddTransaction.category)
async def input_amount(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    data = await state.get_data()
    if data.get("type") == "income" and message.text not in [btn.text for row in income_categories_kb.keyboard for btn in row]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    if data.get("type") == "expense" and message.text not in [btn.text for row in expense_categories_kb.keyboard for btn in row]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(category=message.text)
    await state.set_state(AddTransaction.amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

@router.message(AddTransaction.amount)
async def save_transaction(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    data = await state.get_data()
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO transactions (user_id, amount, category, type) VALUES (?, ?, ?, ?)",
            (user_id, amount, data["category"], data["type"])
        )
        await db.commit()
    await state.clear()
    await message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu)

@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT SUM(CASE WHEN type='income' THEN amount ELSE -amount END) FROM transactions WHERE user_id=?", (user_id,))
        row = await cursor.fetchone()
        balance = row[0] if row[0] is not None else 0
    await message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance:.2f} ‚ÇΩ</b>", parse_mode="HTML")

@router.message(F.text == "üìä –û—Ç—á—ë—Ç")
async def show_report(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT category, SUM(amount) FROM transactions WHERE user_id=? AND type='expense' GROUP BY category ORDER BY SUM(amount) DESC", (user_id,))
        rows = await cursor.fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.")
        return
    text = "<b>–¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
    for cat, amt in rows:
        text += f"{cat}: <b>{amt:.2f} ‚ÇΩ</b>\n"
    await message.answer(text, parse_mode="HTML")

def beautify_answer(text: str) -> str:
    # –£–¥–∞–ª—è–µ–º –∂–∏—Ä–Ω—ã–π (**—Ç–µ–∫—Å—Ç** -> —Ç–µ–∫—Å—Ç)
    text = re.sub(r"\*\*(.*?)\*\*", r"\1", text)
    # –ó–∞–º–µ–Ω—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –Ω–∞ —ç–º–æ–¥–∑–∏ (1. -> üîπ, 2. -> üî∏, 3. -> üîπ ...)
    lines = text.splitlines()
    emoji_cycle = ["üîπ", "üî∏", "üî∑", "üî∂", "üü¢", "üü£", "üü†", "üî∫", "üîª", "üîµ"]
    for i, line in enumerate(lines):
        if re.match(r"^\d+\. ", line):
            emoji = emoji_cycle[i % len(emoji_cycle)]
            lines[i] = re.sub(r"^\d+\. ", f"{emoji} ", line)
    return "\n".join(lines)

# --- –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
async def aggregate_user_data(user_id):
    import aiosqlite
    async with aiosqlite.connect(DB_PATH) as db:
        # –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –º–µ—Å—è—Ü
        month_ago = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        cursor = await db.execute("""
            SELECT category, AVG(amount) FROM transactions
            WHERE user_id=? AND type='expense' AND date>=?
            GROUP BY category ORDER BY AVG(amount) DESC
        """, (user_id, month_ago))
        avg_expenses = await cursor.fetchall()
        avg_expenses_str = '\n'.join([f"{cat}: {amt:.2f}‚ÇΩ" for cat, amt in avg_expenses]) or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

        # –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Ç—Ä–∞—Ç—ã
        cursor = await db.execute("""
            SELECT category, COUNT(*) as cnt FROM transactions
            WHERE user_id=? AND type='expense'
            GROUP BY category ORDER BY cnt DESC LIMIT 3
        """, (user_id,))
        frequent = await cursor.fetchall()
        frequent_str = ', '.join([f"{cat} ({cnt} —Ä–∞–∑)" for cat, cnt in frequent]) or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º
        cursor = await db.execute("SELECT goal_name, target_amount, current_amount FROM goals WHERE user_id=?", (user_id,))
        goals = await cursor.fetchall()
        goals_str = '\n'.join([f"{g[0]}: {g[2]:.2f}/{g[1]:.2f}‚ÇΩ" for g in goals]) or '–Ω–µ—Ç —Ü–µ–ª–µ–π'

        # –î–∏–Ω–∞–º–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (–ø–æ –¥–Ω—è–º)
        cursor = await db.execute("""
            SELECT date(date), SUM(CASE WHEN type='income' THEN amount ELSE -amount END) FROM transactions
            WHERE user_id=? GROUP BY date(date) ORDER BY date(date)
        """, (user_id,))
        rows = await cursor.fetchall()
        dates, balances = [], []
        total = 0
        for d, change in rows:
            total += change
            dates.append(d)
            balances.append(total)
        return avg_expenses_str, frequent_str, goals_str, dates, balances

# --- –ì—Ä–∞—Ñ–∏–∫–∏ ---
def plot_balance(dates, balances):
    plt.figure(figsize=(6,3))
    plt.plot(dates, balances, marker='o')
    plt.title('–î–∏–Ω–∞–º–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ë–∞–ª–∞–Ω—Å, ‚ÇΩ')
    plt.grid(True)
    tmpfile = tempfile.NamedTemporaryFile(delete=False, suffix='.png')
    plt.tight_layout()
    plt.savefig(tmpfile.name)
    plt.close()
    return tmpfile.name

# --- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Å–æ–≤–µ—Ç–∞—Ö ---
@router.message(F.text == "üí° –°–æ–≤–µ—Ç GPT")
async def gpt_advice(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT type, category, amount, date FROM transactions WHERE user_id=? ORDER BY date DESC LIMIT 20", (user_id,))
        rows = await cursor.fetchall()
    if not rows:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.")
        return
    history = "\n".join([f"{r[3][:10]}: {r[0]} {r[1]} {r[2]:.2f}‚ÇΩ" for r in rows])
    await message.answer("ü§ñ –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã...", reply_markup=main_menu)
    advice = await ask_agent(history, "", "–î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏.")
    advice = beautify_answer(advice)
    await message.answer(f"<b>–°–æ–≤–µ—Ç –æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:</b>\n{advice}", parse_mode="HTML")

@router.message(F.text == "üéØ –¶–µ–ª–∏")
async def show_goals(message: Message, state: FSMContext):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT goal_name, target_amount, current_amount, deadline FROM goals WHERE user_id=?", (user_id,))
        goals = await cursor.fetchall()
    if not goals:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–û—Ç–º–µ–Ω–∞'.")
        await state.set_state(GoalStates.name)
        return
    text = "<b>–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏:</b>\n"
    for name, target, current, deadline in goals:
        text += f"‚Ä¢ {name}: {current:.2f}/{target:.2f} ‚ÇΩ (–¥–æ {deadline})\n"
    text += "\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–û—Ç–º–µ–Ω–∞'."
    await message.answer(text, parse_mode="HTML")
    await state.set_state(GoalStates.name)

@router.message(GoalStates.name)
async def goal_set_name(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    await state.update_data(goal_name=message.text)
    await state.set_state(GoalStates.amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É:")

@router.message(GoalStates.amount)
async def goal_set_amount(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    await state.update_data(target_amount=amount)
    await state.set_state(GoalStates.deadline)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-12-31):")

@router.message(GoalStates.deadline)
async def goal_set_deadline(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    data = await state.get_data()
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO goals (user_id, goal_name, target_amount, deadline) VALUES (?, ?, ?, ?)",
            (user_id, data["goal_name"], data["target_amount"], message.text)
        )
        await db.commit()
    await state.clear()
    await message.answer("–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu)

@router.message(F.text == "üí¨ –í–æ–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É")
async def ask_agent_start(message: Message, state: FSMContext):
    await state.set_state(AskAgentState.waiting_for_question)
    await message.answer("–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –≤–∞—à–µ–º—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –∞–≥–µ–Ω—Ç—É. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫ –º–Ω–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å?', '–°—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥?', '–ö–∞–∫ –±—ã—Å—Ç—Ä–µ–µ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏?'\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–û—Ç–º–µ–Ω–∞'.")

@router.message(AskAgentState.waiting_for_question)
async def process_agent_question(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    user_id = message.from_user.id
    # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT type, category, amount, date FROM transactions WHERE user_id=? ORDER BY date DESC LIMIT 30", (user_id,))
        transactions = await cursor.fetchall()
        cursor = await db.execute("SELECT goal_name, target_amount, current_amount, deadline FROM goals WHERE user_id=?", (user_id,))
        goals = await cursor.fetchall()
    history = "\n".join([f"{r[3][:10]}: {r[0]} {r[1]} {r[2]:.2f}‚ÇΩ" for r in transactions]) if transactions else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    goals_str = "\n".join([f"{g[0]}: {g[2]:.2f}/{g[1]:.2f}‚ÇΩ –¥–æ {g[3]}" for g in goals]) if goals else "–Ω–µ—Ç —Ü–µ–ª–µ–π"
    logging.info("[AGENT] –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n%s", history)
    logging.info("[AGENT] –¶–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n%s", goals_str)
    await message.answer("ü§ñ –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...", reply_markup=main_menu)
    answer = await ask_agent(history, goals_str, message.text)
    answer = beautify_answer(answer)
    await state.clear()
    await message.answer(f"<b>–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞:</b>\n{answer}", parse_mode="HTML")
