import logging
import numpy as np
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from .states import CreditStates
from db import save_credit_application, get_user_credit_history

router = Router()
logger = logging.getLogger(__name__)

def get_menu_with_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

@router.message(F.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    from keyboards.main_menu import main_menu
    await state.clear()
    await message.answer("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

def calculate_credit_probability(inputs):
    """–†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞ –ø–æ –º–æ–¥–µ–ª–∏"""
    logit = -0.596662 + \
            0.004 * inputs['age'] + \
            -0.06 * inputs['marital'] + \
            -0.01 * inputs['housing'] + \
            -0.05 * inputs['loan'] + \
            -1.26 * inputs.get('_manual_labor', 0) + \
            -0.72 * inputs.get('_office_workers', 0) + \
            0.50 * inputs.get('_other', 0) + \
            -1.26 * inputs.get('_service_sector', 0) + \
            -0.98 * inputs.get('_tech_related', 0) + \
            0.12 * inputs.get('_higher', 0) + \
            -0.30 * inputs.get('_secondary', 0) + \
            0.001 * inputs['duration'] + \
            -0.07 * inputs['campaign']
    
    probability = 1 / (1 + np.exp(-logit))
    return round(probability * 100, 2)

def get_selected_job(inputs):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é"""
    if inputs.get('_manual_labor'):
        return '–§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥'
    elif inputs.get('_office_workers'):
        return '–û—Ñ–∏—Å–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫'
    elif inputs.get('_other'):
        return '–î—Ä—É–≥–æ–µ'
    elif inputs.get('_service_sector'):
        return '–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥'
    elif inputs.get('_tech_related'):
        return 'IT/–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
    return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

def get_selected_education(inputs):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"""
    if inputs.get('_higher'):
        return '–í—ã—Å—à–µ–µ'
    elif inputs.get('_secondary'):
        return '–°—Ä–µ–¥–Ω–µ–µ'
    return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

@router.message(F.text == "üí≥ –ö—Ä–µ–¥–∏—Ç—ã")
async def credits_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")],
            [KeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@router.message(F.text == "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def start_credit_survey(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å –¥–ª—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    await state.set_state(CreditStates.age)
    await message.answer(
        "üìù –ù–æ–≤–∞—è –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
        reply_markup=get_menu_with_back_keyboard()
    )

@router.message(F.text == "üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫")
async def show_credit_history(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    history = await get_user_credit_history(message.from_user.id)
    
    if not history:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    
    response = "üìä –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫:\n\n"
    for i, record in enumerate(history[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫
        response += f"{i}. –î–∞—Ç–∞: {record[12]}\n"
        response += f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è: {record[11]}%\n"
        response += f"   –í–æ–∑—Ä–∞—Å—Ç: {record[2]}, –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {record[6]}\n"
        if len(record) > 10 and record[10]:  # loan_amount
            response += f"   –°—É–º–º–∞: {record[10]:,.0f}‚ÇΩ, –°—Ä–æ–∫: {record[8]} –º–µ—Å.\n"
            response += f"   –ü–µ—Ä–≤—ã–π –∫—Ä–µ–¥–∏—Ç –≤ –∂–∏–∑–Ω–∏: {'–î–∞' if record[9] == 0 else '–ù–µ—Ç'}\n"
        response += "\n"
    
    await message.answer(response)

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from keyboards.main_menu import main_menu
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

@router.message(CreditStates.age)
async def process_age(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç"""
    if message.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await return_to_main_menu(message, state)
        return
    
    try:
        age = int(message.text)
        if age < 18 or age > 100:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-100)')
            return
        
        await state.update_data(age=age)
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º"), KeyboardButton(text="–•–æ–ª–æ—Å—Ç/–Ω–µ –∑–∞–º—É–∂–µ–º")],
                [KeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            '–í–∞—à–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:',
            reply_markup=keyboard
        )
        await state.set_state(CreditStates.marital)
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')

@router.message(CreditStates.marital)
async def process_marital(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
    if message.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await return_to_main_menu(message, state)
        return
    
    marital = 1 if message.text == "–ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º" else 0
    await state.update_data(marital=marital)
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")],
            [KeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∂–∏–ª—å–µ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏?',
        reply_markup=keyboard
    )
    await state.set_state(CreditStates.housing)

@router.message(CreditStates.housing)
async def process_housing(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∂–∏–ª—å—è"""
    if message.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await return_to_main_menu(message, state)
        return
    
    housing = 1 if message.text == "–î–∞" else 0
    await state.update_data(housing=housing)
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")],
            [KeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–ø–æ—Ç–µ–∫–∞, –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç, –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏ —Ç.–¥.)?\n(–ï—Å–ª–∏ –≤—Å–µ –∫—Ä–µ–¥–∏—Ç—ã —É–∂–µ –ø–æ–≥–∞—à–µ–Ω—ã ‚Äî –æ—Ç–≤–µ—á–∞–π—Ç–µ "–ù–µ—Ç")',
        reply_markup=keyboard
    )
    await state.set_state(CreditStates.loan)

@router.message(CreditStates.loan)
async def process_loan(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    if message.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await return_to_main_menu(message, state)
        return
    
    loan = 1 if message.text == "–î–∞" else 0
    await state.update_data(loan=loan)
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥")],
            [KeyboardButton(text="–û—Ñ–∏—Å–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫")],
            [KeyboardButton(text="IT/–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")],
            [KeyboardButton(text="–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥")],
            [KeyboardButton(text="–î—Ä—É–≥–æ–µ")],
            [KeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        '–í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è:',
        reply_markup=keyboard
    )
    await state.set_state(CreditStates.job)

@router.message(CreditStates.job)
async def process_job(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏—é"""
    if message.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await return_to_main_menu(message, state)
        return
    
    job_type = message.text
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    job_data = {
        '_manual_labor': 0,
        '_office_workers': 0,
        '_other': 0,
        '_service_sector': 0,
        '_tech_related': 0
    }
    
    if job_type == '–§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥':
        job_data['_manual_labor'] = 1
    elif job_type == '–û—Ñ–∏—Å–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫':
        job_data['_office_workers'] = 1
    elif job_type == 'IT/–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏':
        job_data['_tech_related'] = 1
    elif job_type == '–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥':
        job_data['_service_sector'] = 1
    else:
        job_data['_other'] = 1
    
    await state.update_data(**job_data, job_category=job_type)
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í—ã—Å—à–µ–µ")],
            [KeyboardButton(text="–°—Ä–µ–¥–Ω–µ–µ")],
            [KeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        '–í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:',
        reply_markup=keyboard
    )
    await state.set_state(CreditStates.education)

@router.message(CreditStates.education)
async def process_education(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"""
    if message.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await return_to_main_menu(message, state)
        return
    
    education = message.text
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    education_data = {
        '_higher': 0,
        '_secondary': 0,
        '_low': 0
    }
    
    if education == '–í—ã—Å—à–µ–µ':
        education_data['_higher'] = 1
    elif education == '–°—Ä–µ–¥–Ω–µ–µ':
        education_data['_secondary'] = 1
    else:
        education_data['_low'] = 1
    
    await state.update_data(**education_data, education=education)
    
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö:',
        reply_markup=get_menu_with_back_keyboard()
    )
    await state.set_state(CreditStates.duration)

@router.message(CreditStates.duration)
async def process_duration(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞"""
    if message.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await return_to_main_menu(message, state)
        return
    
    try:
        duration = int(message.text)
        if duration <= 0 or duration > 120:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –æ—Ç 1 –¥–æ 120 –º–µ—Å—è—Ü–µ–≤')
            return
        
        await state.update_data(duration=duration)
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")],
                [KeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            '–≠—Ç–æ –≤–∞—à –ø–µ—Ä–≤—ã–π –∫—Ä–µ–¥–∏—Ç –≤ –∂–∏–∑–Ω–∏?\n(–ï—Å–ª–∏ –≤—ã –∫–æ–≥–¥–∞-–ª–∏–±–æ –±—Ä–∞–ª–∏ –∫—Ä–µ–¥–∏—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å —É –≤–∞—Å –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–π—Ç–µ "–ù–µ—Ç")',
            reply_markup=keyboard
        )
        await state.set_state(CreditStates.campaign)
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')

@router.message(CreditStates.campaign)
async def process_campaign(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –ª–∏ –∫—Ä–µ–¥–∏—Ç"""
    if message.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await return_to_main_menu(message, state)
        return
    
    # campaign = 0 –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∫—Ä–µ–¥–∏—Ç (–î–∞), 1 –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤—ã–π (–ù–µ—Ç)
    campaign = 0 if message.text == "–î–∞" else 1
    await state.update_data(campaign=campaign)
    
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):',
        reply_markup=get_menu_with_back_keyboard()
    )
    await state.set_state(CreditStates.loan_amount)

@router.message(CreditStates.loan_amount)
async def process_loan_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å"""
    if message.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await return_to_main_menu(message, state)
        return
    
    try:
        amount = int(message.text)
        if amount <= 0:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É')
            return
        
        await state.update_data(loan_amount=amount)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        # –†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        probability = calculate_credit_probability(data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await save_credit_application(message.from_user.id, data, probability)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:

‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è: {probability}%

üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}
‚Ä¢ –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {'–ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º' if data['marital'] else '–•–æ–ª–æ—Å—Ç/–Ω–µ –∑–∞–º—É–∂–µ–º'}
‚Ä¢ –ù–∞–ª–∏—á–∏–µ –∂–∏–ª—å—è: {'–î–∞' if data['housing'] else '–ù–µ—Ç'}
‚Ä¢ –î–µ–π—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã: {'–î–∞' if data['loan'] else '–ù–µ—Ç'}
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {data['job_category']}
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {data['education']}
‚Ä¢ –°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞: {data['duration']} –º–µ—Å.
‚Ä¢ –ü–µ—Ä–≤—ã–π –∫—Ä–µ–¥–∏—Ç –≤ –∂–∏–∑–Ω–∏: {'–î–∞' if data['campaign'] == 0 else '–ù–µ—Ç'}
‚Ä¢ –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {amount:,} ‚ÇΩ

ÔøΩÔøΩ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
"""
        
        if probability >= 80:
            report += "üéâ –û—Ç–ª–∏—á–Ω—ã–µ —à–∞–Ω—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ! –ú–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É."
        elif probability >= 60:
            report += "üëç –•–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞."
        elif probability >= 40:
            report += "‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–µ —à–∞–Ω—Å—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å —Å—É–º–º—É."
        else:
            report += "‚ùå –ù–∏–∑–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")],
                [KeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(report, reply_markup=keyboard)
        await state.clear()
        
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ') 