from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from keyboards import main_menu, period_kb, confirm_amount_kb
from keyboards.goals import get_goals_inline_keyboard, get_deposit_quick_inline_kb, get_goals_delete_inline_keyboard, get_goals_edit_inline_keyboard, get_confirm_inline_keyboard, format_goal_pretty, get_goals_action_inline_keyboard, get_goal_manage_inline_keyboard, get_goal_edit_field_inline_keyboard, get_goals_list_inline_keyboard
from db import DB_PATH
import aiosqlite
from .states import GoalStates, GoalDepositStates
from datetime import datetime, timedelta

router = Router()


@router.message(F.text == "üéØ –¶–µ–ª–∏")
async def show_goals(message: Message, state: FSMContext):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT goal_name, target_amount, current_amount, deadline, period, strategy_value, priority FROM goals WHERE user_id=?", (user_id,))
        goals = await cursor.fetchall()
    kb = get_goals_list_inline_keyboard(goals)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:", reply_markup=kb)
    await state.set_state(GoalStates.name)

@router.callback_query(F.data == "goal_add_new")
async def goal_add_new(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏:")
    
    await state.set_state(GoalStates.name)

@router.callback_query(F.data.startswith("goal_action:"))
async def goal_action_select(call: CallbackQuery, state: FSMContext):
    goal_name = call.data.split(":", 1)[1].strip()
    await state.update_data(selected_goal=goal_name)
    kb = get_goal_manage_inline_keyboard(goal_name)
    await call.message.edit_text(f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —Ü–µ–ª—å—é <b>{goal_name}</b>?", reply_markup=kb, parse_mode="HTML")

@router.callback_query(F.data.startswith("goal_manage:deposit:"))
async def goal_manage_deposit(call: CallbackQuery, state: FSMContext):
    goal_name = call.data.split(":", 2)[2].strip()
    await state.update_data(selected_goal=goal_name)
    await call.message.edit_text(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ <b>{goal_name}</b>:", parse_mode="HTML")
    await state.set_state(GoalDepositStates.waiting_for_amount)

@router.callback_query(F.data.startswith("goal_manage:edit:"))
async def goal_manage_edit(call: CallbackQuery, state: FSMContext):
    goal_name = call.data.split(":", 2)[2]
    await state.update_data(selected_goal=goal_name)
    kb = get_goal_edit_field_inline_keyboard(goal_name)
    await call.message.edit_text(f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ü–µ–ª–∏ <b>{goal_name}</b>?", reply_markup=kb, parse_mode="HTML")

@router.callback_query(F.data.startswith("edit_goal_field:"))
async def edit_goal_field(call: CallbackQuery, state: FSMContext):
    field = call.data.split(":", 1)[1]
    await state.update_data(edit_field=field)
    prompts = {"name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", "deadline": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω (–ì–ì–ì–ì-–ú–ú-–î–î):", "amount": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É:"}
    await call.message.edit_text(prompts[field])
    await state.set_state(GoalStates.confirm_amount)

@router.message(GoalStates.confirm_amount)
async def save_edited_goal(message: Message, state: FSMContext):
    data = await state.get_data()
    goal_name = data.get("selected_goal")
    field = data.get("edit_field")
    user_id = message.from_user.id
    value = message.text.strip()
    async with aiosqlite.connect(DB_PATH) as db:
        if field == "name":
            await db.execute("UPDATE goals SET goal_name=? WHERE user_id=? AND goal_name=?", (value, user_id, goal_name))
        elif field == "deadline":
            await db.execute("UPDATE goals SET deadline=? WHERE user_id=? AND goal_name=?", (value, user_id, goal_name))
        elif field == "amount":
            try:
                value = float(value.replace(",", "."))
            except ValueError:
                await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
                return
            await db.execute("UPDATE goals SET target_amount=? WHERE user_id=? AND goal_name=?", (value, user_id, goal_name))
        await db.commit()
    await state.clear()
    await message.answer("‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=main_menu)

@router.callback_query(F.data.startswith("goal_manage:delete:"))
async def goal_manage_delete(call: CallbackQuery, state: FSMContext):
    goal_name = call.data.split(":", 2)[2]
    user_id = call.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM goals WHERE user_id=? AND goal_name=?", (user_id, goal_name))
        await db.commit()
    await state.clear()
    await call.message.edit_text(f"üóëÔ∏è –¶–µ–ª—å <b>{goal_name}</b> —É–¥–∞–ª–µ–Ω–∞!", parse_mode="HTML")

@router.callback_query(F.data == "goal_manage:back")
async def goal_manage_back(call: CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ü–µ–ª–µ–π
    await show_goals(call.message, state)

@router.message(GoalStates.name)
async def goal_set_name(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    await state.update_data(goal_name=message.text)
    await state.set_state(GoalStates.amount)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É:")

@router.message(GoalStates.amount)
async def goal_set_amount(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    await state.update_data(target_amount=amount)
    await state.set_state(GoalStates.deadline)
    today = datetime.now().strftime("%Y-%m-%d")
    await message.answer(f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, {today}):")

@router.message(GoalStates.deadline)
async def goal_set_deadline(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    await state.update_data(deadline=message.text)
    await state.set_state(GoalStates.period)
    await message.answer(
        "üîÑ –ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤–∞–º —É–¥–æ–±–Ω–µ–µ?",
        reply_markup=period_kb
    )

@router.message(GoalStates.period)
async def goal_set_period(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    period = message.text.strip().lower()
    if period not in ["–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "–µ–∂–µ–º–µ—Å—è—á–Ω–æ"]:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –∏–ª–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ.")
        return
    data = await state.get_data()
    # –†–∞—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
    try:
        deadline = datetime.strptime(data["deadline"], "%Y-%m-%d")
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-12-31):")
        await state.set_state(GoalStates.deadline)
        return
    today = datetime.now()
    if deadline <= today:
        await message.answer("‚ö†Ô∏è –î–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
        await state.set_state(GoalStates.deadline)
        return
    total = float(data["target_amount"])
    if period == "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ":
        periods = (deadline - today).days
    elif period == "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ":
        periods = max(1, (deadline - today).days // 7)
    else:
        periods = max(1, (deadline.year - today.year) * 12 + (deadline.month - today.month))
    if periods < 1:
        periods = 1
    amount_per_period = round(total / periods, 2)
    await state.update_data(period=period)
    await state.update_data(calc_amount=amount_per_period)
    await state.set_state(GoalStates.confirm_amount)
    await message.answer(
        f"üìà –ß—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏ –∫ {data['deadline']}, –Ω—É–∂–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –ø–æ <b>{amount_per_period:.2f}‚ÇΩ</b> {period}. –û—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ?",
        reply_markup=confirm_amount_kb,
        parse_mode="HTML"
    )

@router.message(GoalStates.confirm_amount)
async def goal_confirm_amount(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    data = await state.get_data()
    recommended = data["calc_amount"]
    period = data["period"]
    deadline_str = data["deadline"]
    total = float(data["target_amount"])
    from datetime import datetime, timedelta
    try:
        deadline = datetime.strptime(deadline_str, "%Y-%m-%d")
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-12-31):")
        await state.set_state(GoalStates.deadline)
        return
    today = datetime.now()
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
    if message.text.lower() in ["–¥–∞", "–æ–∫", "yes"]:
        await state.update_data(strategy_value=recommended)
        await state.set_state(GoalStates.priority)
        await message.answer("‚≠êÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–ª–∏ (1 ‚Äî –æ–±—ã—á–Ω–∞—è, 2 ‚Äî –≤–∞–∂–Ω–∞—è, 3 ‚Äî –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞—è):", reply_markup=ReplyKeyboardRemove())
        return
    if message.text.lower() == "–Ω–µ—Ç":
        await message.answer("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –≤–∞—Å —Å—É–º–º—É:", reply_markup=ReplyKeyboardRemove())
        return
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å–≤–æ—é —Å—É–º–º—É
    try:
        value = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        return
    # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å –Ω–æ–≤–æ–π —Å—É–º–º–æ–π
    if value <= 0:
        await message.answer("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    if period == "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ":
        periods_needed = int((total // value) + (1 if total % value else 0))
        new_date = today + timedelta(days=periods_needed)
    elif period == "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ":
        periods_needed = int((total // value) + (1 if total % value else 0))
        new_date = today + timedelta(weeks=periods_needed)
    else:  # –µ–∂–µ–º–µ—Å—è—á–Ω–æ
        periods_needed = int((total // value) + (1 if total % value else 0))
        # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü—ã
        year = today.year
        month = today.month
        day = today.day
        for _ in range(periods_needed):
            month += 1
            if month > 12:
                month = 1
                year += 1
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–µ–Ω—å, –µ—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 31 —Ñ–µ–≤—Ä–∞–ª—è
        try:
            new_date = datetime(year, month, day)
        except ValueError:
            # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ—Ç, –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            import calendar
            last_day = calendar.monthrange(year, month)[1]
            new_date = datetime(year, month, last_day)
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥–µ–¥–ª–∞–π–Ω–æ–º
    if value < recommended:
        if new_date > deadline:
            await message.answer(f"‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –ø–æ <b>{value:.2f}‚ÇΩ</b> {period}, –≤—ã –Ω–∞–∫–æ–ø–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É —Ç–æ–ª—å–∫–æ –∫ <b>{new_date.strftime('%Y-%m-%d')}</b>. –•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É —Å—É–º–º—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë? (–î–∞/–ù–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É)", reply_markup=confirm_amount_kb, parse_mode="HTML")
            await state.update_data(strategy_value=value)
            return
    # –ï—Å–ª–∏ —Å—É–º–º–∞ >= —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –∏–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–∂–∏–º–∞ –∫ –¥–µ–¥–ª–∞–π–Ω—É
    await state.update_data(strategy_value=value)
    await state.set_state(GoalStates.priority)
    await message.answer("‚≠êÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–ª–∏ (1 ‚Äî –æ–±—ã—á–Ω–∞—è, 2 ‚Äî –≤–∞–∂–Ω–∞—è, 3 ‚Äî –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞—è):", reply_markup=ReplyKeyboardRemove())

@router.message(GoalStates.priority)
async def goal_set_priority(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        return
    try:
        priority = int(message.text)
        if priority not in [1, 2, 3]:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
        return
    data = await state.get_data()
    user_id = message.from_user.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º period, strategy_value, priority
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO goals (user_id, goal_name, target_amount, deadline, period, strategy_value, priority) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (user_id, data["goal_name"], data["target_amount"], data["deadline"], data["period"], data["strategy_value"], priority)
        )
        await db.commit()
    await state.clear()
    await message.answer("üéâ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ü—É—Å—Ç—å –≤–∞—à–∏ –º–µ—á—Ç—ã —Å–±—ã–≤–∞—é—Ç—Å—è!", reply_markup=main_menu)

@router.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª—å")
async def ask_goal_to_deposit(message: Message, state: FSMContext):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT goal_name FROM goals WHERE user_id=?", (user_id,))
        goals = [row[0] for row in await cursor.fetchall()]
    if not goals:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.", reply_markup=main_menu)
        return
    kb = get_goals_inline_keyboard(goals)
    await state.set_state(GoalDepositStates.waiting_for_goal)
    await message.answer("üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=kb)

@router.callback_query(F.data.startswith("goal_select:"), GoalDepositStates.waiting_for_goal)
async def choose_goal_to_deposit_callback(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    goal_name = call.data.split(":", 1)[1]
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT id, goal_name, target_amount, current_amount, deadline, period, strategy_value FROM goals WHERE user_id=? AND goal_name=?", (user_id, goal_name))
        goal = await cursor.fetchone()
    if not goal:
        await call.message.edit_text("‚ö†Ô∏è –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    goal_id, name, target, current, deadline, period, strategy_value = goal
    from datetime import datetime
    today = datetime.now().date()
    left = max(0, target - current)
    period_l = (period or '').lower()
    if period_l == "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ":
        days_left = (datetime.strptime(deadline, "%Y-%m-%d").date() - today).days
        rec = round(left / days_left, 2) if days_left > 0 else left
    elif period_l == "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ":
        weeks_left = max(1, (datetime.strptime(deadline, "%Y-%m-%d").date() - today).days // 7)
        rec = round(left / weeks_left, 2)
    else:
        months_left = max(1, (datetime.strptime(deadline, "%Y-%m-%d").date().year - today.year) * 12 + (datetime.strptime(deadline, "%Y-%m-%d").date().month - today.month))
        rec = round(left / months_left, 2)
    await state.set_state(GoalDepositStates.waiting_for_amount)
    await state.update_data(selected_goal=goal_name, goal_id=goal_id, target=target, current=current)
    kb = get_deposit_quick_inline_kb(rec)
    await call.message.edit_text(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ <b>{goal_name}</b> –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=kb, parse_mode="HTML")

@router.callback_query(F.data.startswith("goal_cancel"), GoalDepositStates.waiting_for_goal)
async def cancel_goal_deposit(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

@router.message(F.text == "–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–ª–∏")
async def ask_goal_for_history(message: Message, state: FSMContext):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT goal_name FROM goals WHERE user_id=?", (user_id,))
        goals = [row[0] for row in await cursor.fetchall()]
    if not goals:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ü–µ–ª–µ–π.", reply_markup=main_menu)
        return
    kb = get_goals_inline_keyboard(goals)
    await state.set_state(GoalDepositStates.waiting_for_goal)
    await message.answer("üìñ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:", reply_markup=kb)

@router.callback_query(F.data.startswith("goal_history:"), GoalDepositStates.waiting_for_goal)
async def show_goal_history(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    goal_name = call.data.split(":", 1)[1]
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT id FROM goals WHERE user_id=? AND goal_name=?", (user_id, goal_name))
        row = await cursor.fetchone()
        if not row:
            await call.message.edit_text("‚ö†Ô∏è –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        goal_id = row[0]
        cursor = await db.execute("SELECT amount, date, source FROM goal_deposits WHERE goal_id=? ORDER BY date DESC", (goal_id,))
        deposits = await cursor.fetchall()
    if not deposits:
        await call.message.edit_text("‚ÑπÔ∏è –î–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π.")
        return
    text = f"<b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è —Ü–µ–ª–∏ {goal_name}:</b>\n"
    for amount, date, source in deposits:
        text += f"{date}: +{amount:.2f}‚ÇΩ ({source})\n"
    await call.message.edit_text(text, parse_mode="HTML")

@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å")
async def ask_goal_to_delete(message: Message, state: FSMContext):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT goal_name FROM goals WHERE user_id=?", (user_id,))
        goals = [row[0] for row in await cursor.fetchall()]
    if not goals:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_menu)
        return
    kb = get_goals_delete_inline_keyboard(goals)
    await state.set_state(GoalDepositStates.waiting_for_goal)
    await message.answer("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@router.callback_query(F.data.startswith("goal_delete:"), GoalDepositStates.waiting_for_goal)
async def confirm_goal_delete(call: CallbackQuery, state: FSMContext):
    goal_name = call.data.split(":", 1)[1]
    await state.update_data(goal_to_delete=goal_name)
    kb = get_confirm_inline_keyboard()
    await call.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å <b>{goal_name}</b>?", reply_markup=kb, parse_mode="HTML")

@router.callback_query(F.data == "confirm_yes", GoalDepositStates.waiting_for_goal)
async def do_goal_delete(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    goal_name = data.get("goal_to_delete")
    user_id = call.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM goals WHERE user_id=? AND goal_name=?", (user_id, goal_name))
        await db.commit()
    await state.clear()
    await call.message.edit_text(f"‚úÖ –¶–µ–ª—å <b>{goal_name}</b> —É–¥–∞–ª–µ–Ω–∞!", reply_markup=main_menu, parse_mode="HTML")

@router.callback_query(F.data == "confirm_no", GoalDepositStates.waiting_for_goal)
async def cancel_goal_delete(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)

@router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å")
async def ask_goal_to_edit(message: Message, state: FSMContext):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT goal_name FROM goals WHERE user_id=?", (user_id,))
        goals = [row[0] for row in await cursor.fetchall()]
    if not goals:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=main_menu)
        return
    kb = get_goals_edit_inline_keyboard(goals)
    await state.set_state(GoalDepositStates.waiting_for_goal)
    await message.answer("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)

@router.message(GoalDepositStates.waiting_for_amount)
async def deposit_goal_custom_amount(message: Message, state: FSMContext):
    try:
        value = float(message.text.replace(",", "."))
        if value <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
        return
    data = await state.get_data()
    goal_name = data.get("selected_goal", "").strip()
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT id FROM goals WHERE user_id=? AND TRIM(goal_name)=?",
            (user_id, goal_name)
        )
        row = await cursor.fetchone()
        if not row:
            await state.clear()
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu)
            return
        goal_id = row[0]
        await db.execute("UPDATE goals SET current_amount = current_amount + ? WHERE id=?", (value, goal_id))
        await db.execute("INSERT INTO goal_deposits (goal_id, user_id, amount, date, source) VALUES (?, ?, ?, DATE('now'), ?) ", (goal_id, user_id, value, "–¥–æ—Ö–æ–¥"))
        await db.commit()
        cursor = await db.execute("SELECT current_amount, target_amount FROM goals WHERE id=?", (goal_id,))
        current, target = await cursor.fetchone()
    await state.clear()
    await message.answer(f"üéâ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ <b>{goal_name}</b> –Ω–∞ {value:.2f}‚ÇΩ —É—Å–ø–µ—à–Ω–æ!", parse_mode="HTML", reply_markup=main_menu)

# –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ü–µ–ª–µ–π
async def pretty_goals_list(user_id):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT goal_name, current_amount, target_amount, deadline, period, strategy_value, priority FROM goals WHERE user_id=?", (user_id,))
        goals = await cursor.fetchall()
    if not goals:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é!"
    text = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏:\n"
    for name, current, target, deadline, period, strategy_value, priority in goals:
        text += format_goal_pretty(name, current, target, deadline, period, strategy_value, priority) + "\n\n"
    return text 