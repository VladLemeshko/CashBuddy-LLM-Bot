from aiogram import Router, F
from aiogram.types import Message
from keyboards import main_menu
from db import DB_PATH
import aiosqlite
from gpt import ask_agent
from .utils import beautify_answer
from keyboards.expense_categories import EXPENSE_CATEGORIES

router = Router()

# gpt_advice 

async def build_user_context(user_id):
    async with aiosqlite.connect(DB_PATH) as db:
        # –ë–∞–ª–∞–Ω—Å
        cursor = await db.execute("SELECT SUM(CASE WHEN type='income' THEN amount ELSE -amount END) FROM transactions WHERE user_id=?", (user_id,))
        row = await cursor.fetchone()
        balance = row[0] if row and row[0] is not None else 0
        # –¶–µ–ª–∏
        cursor = await db.execute("SELECT goal_name, target_amount, current_amount, deadline, period, strategy_value, priority FROM goals WHERE user_id=?", (user_id,))
        goals = await cursor.fetchall()
        goals_text = ""
        for name, target, current, deadline, period, strategy, prio in goals:
            percent = int(min(100, (current / target) * 100)) if target else 0
            goals_text += f"‚Ä¢ {name}: {current:.0f}/{target:.0f}‚ÇΩ ({percent}%), –¥–æ {deadline}\n"
        # –¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        cursor = await db.execute("SELECT category, SUM(amount) FROM transactions WHERE user_id=? AND type='expense' GROUP BY category ORDER BY SUM(amount) DESC", (user_id,))
        rows = await cursor.fetchall()
        expenses_text = ""
        for cat, amt in rows:
            cat_name = EXPENSE_CATEGORIES.get(cat, cat)
            expenses_text += f"{cat_name}: {amt:.0f}‚ÇΩ\n"
    context = (
        f"–ë–∞–ª–∞–Ω—Å: {balance:.2f}‚ÇΩ\n"
        f"–¶–µ–ª–∏:\n{goals_text or '–ù–µ—Ç —Ü–µ–ª–µ–π'}\n"
        f"–¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n{expenses_text or '–ù–µ—Ç —Ç—Ä–∞—Ç'}"
    )
    return context

@router.message(F.text == "üí° –°–æ–≤–µ—Ç GPT")
async def gpt_advice(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT type, category, amount, date FROM transactions WHERE user_id=? ORDER BY date DESC LIMIT 20", (user_id,))
        rows = await cursor.fetchall()
    if not rows:
        await message.answer("üòï –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç! üí°")
        return
    history = "\n".join([f"{r[3][:10]}: {r[0]} {r[1]} {r[2]:.2f}‚ÇΩ" for r in rows])
    user_context = await build_user_context(user_id)
    await message.answer("ü§ñ –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥! ‚è≥", reply_markup=main_menu)
    advice = await ask_agent(history, user_context, "–î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
    advice = beautify_answer(advice)
    await message.answer(f"<b>‚ú® –°–æ–≤–µ—Ç –æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:</b>\n{advice}\n\nüå± –£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!", parse_mode="HTML") 