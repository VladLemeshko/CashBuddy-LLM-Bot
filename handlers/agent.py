from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from keyboards import main_menu
from gpt import ask_agent
from .utils import beautify_answer
from keyboards.expense_categories import EXPENSE_CATEGORIES
import aiosqlite
from aiogram.fsm.state import StatesGroup, State
from db import DB_PATH
from aiogram.types import CallbackQuery
from tools.deposit_parser import get_best_deposits

router = Router()

class AgentDialogState(StatesGroup):
    active = State()

@router.message(F.text == "ü§ñ –ê–≥–µ–Ω—Ç")
async def start_agent_dialog(message: Message, state: FSMContext):
    await state.set_state(AgentDialogState.active)
    await message.answer("–í—ã –≤ –¥–∏–∞–ª–æ–≥–µ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∞–≥–µ–Ω—Ç–æ–º! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é. –î–ª—è –≤—ã—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–û—Ç–º–µ–Ω–∞' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.")

@router.message(AgentDialogState.active)
async def agent_dialog(message: Message, state: FSMContext):
    if (message.text.lower() == "–æ—Ç–º–µ–Ω–∞" or 
        message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥" or
        message.text == "‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥" or
        message.text == "üí∞ –ë–∞–ª–∞–Ω—Å" or
        message.text == "üìä –û—Ç—á—ë—Ç" or
        message.text == "üéØ –¶–µ–ª–∏" or
        message.text == "üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏" or
        message.text == "üí≥ –ö—Ä–µ–¥–∏—Ç—ã"):
        await state.clear()
        await message.answer("‚ùå –î–∏–∞–ª–æ–≥ —Å –∞–≥–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_menu)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥":
            from .transactions import add_income_start
            await add_income_start(message, state)
        elif message.text == "‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥":
            from .transactions import add_expense_start
            await add_expense_start(message, state)
        elif message.text == "üí∞ –ë–∞–ª–∞–Ω—Å":
            from .report import show_balance
            await show_balance(message)
        elif message.text == "üìä –û—Ç—á—ë—Ç":
            from .report import show_report
            await show_report(message)
        elif message.text == "üéØ –¶–µ–ª–∏":
            from .goals import show_goals
            await show_goals(message, state)
        elif message.text == "üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
            from .investments import investments_menu_handler
            await investments_menu_handler(message)
        elif message.text == "üí≥ –ö—Ä–µ–¥–∏—Ç—ã":
            from .credits import credits_menu
            await credits_menu(message, state)
        return
        
    user_id = message.from_user.id
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –¥–∞—Ç–∞–º–∏
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT type, category, amount, date FROM transactions WHERE user_id=? ORDER BY date DESC LIMIT 30",
            (user_id,)
        )
        transactions = await cursor.fetchall()
    history = "\n".join([f"{r[3][:10]}: {r[0]} {r[1]} {r[2]:.2f}‚ÇΩ" for r in transactions]) if transactions else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    user_context = await build_user_context(user_id)
    answer = await ask_agent(history, user_context, message.text)
    answer = beautify_answer(answer)
    await message.answer(f"<b>ü§ñ –ê–≥–µ–Ω—Ç:</b>\n{answer}", parse_mode="HTML")

@router.callback_query(F.data == "stop_agent_chat", AgentDialogState.active)
async def stop_agent_chat(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("‚ùå –î–∏–∞–ª–æ–≥ —Å –∞–≥–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_menu)

async def build_user_context(user_id):
    import sys
    sys.path.append("./tools")
    from tools.crypto_rates import get_crypto_rates
    from tools.stock_movers import get_top_us_movers, get_top_ru_movers
    from tools.deposit_parser import get_best_deposits
    import asyncio
    import concurrent.futures
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        cursor = await db.execute("SELECT income_type, monthly_income, has_deposits, deposit_bank, deposit_interest, deposit_amount, deposit_term, deposit_date, has_loans, loans_total, loans_interest, has_investments, investments_amount, investments_profit, financial_mood, has_regular_payments, regular_payments_list FROM user_profiles WHERE user_id=?", (user_id,))
        profile = await cursor.fetchone()
        profile_text = ""
        deposit_analysis = ""
        if profile:
            (
                income_type, monthly_income, has_deposits, deposit_bank, deposit_interest, deposit_amount, deposit_term, deposit_date,
                has_loans, loans_total, loans_interest, has_investments, investments_amount, investments_profit, financial_mood,
                has_regular_payments, regular_payments_list
            ) = profile
            profile_text = (
                f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
                f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞: {income_type or '‚Äî'}\n"
                f"‚Ä¢ –î–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü: {monthly_income if monthly_income is not None else '‚Äî'}‚ÇΩ\n"
                f"‚Ä¢ –í–∫–ª–∞–¥—ã: {'–î–∞' if has_deposits else '–ù–µ—Ç'}"
            )
            if has_deposits:
                profile_text += f"\n  –ë–∞–Ω–∫: {deposit_bank or '‚Äî'}\n  –°—Ç–∞–≤–∫–∞: {deposit_interest or '‚Äî'}%\n  –°—É–º–º–∞: {deposit_amount or '‚Äî'}‚ÇΩ\n  –°—Ä–æ–∫: {deposit_term or '‚Äî'}\n  –î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: {deposit_date or '‚Äî'}\n"
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–æ–ø-5 —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∞–º–∏
                try:
                    best_deposits = get_best_deposits()
                    best = sorted(best_deposits, key=lambda d: float(str(d['–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å']).replace('%','').replace(',','.')), reverse=True)[:5]
                    deposits_block = "<b>–¢–æ–ø-5 –≤–∫–ª–∞–¥–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ:</b>\n"
                    for i, d in enumerate(best, 1):
                        deposits_block += f"{i}. {d['–ë–∞–Ω–∫']} ‚Äî {d['–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å']}, {d['–°—Ä–æ–∫']}, –º–∏–Ω. {d['–ú–∏–Ω. —Å—É–º–º–∞']}\n"
                    deposit_analysis = (f"\n{deposits_block}\n"
                        "–°—Ä–∞–≤–Ω–∏ –º–æ–π –≤–∫–ª–∞–¥ —Å —ç—Ç–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ –¥–∞–π —Å–æ–≤–µ—Ç: –≥–¥–µ —É—Å–ª–æ–≤–∏—è –ª—É—á—à–µ, —Å—Ç–æ–∏—Ç –ª–∏ –º–µ–Ω—è—Ç—å –≤–∫–ª–∞–¥, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ.\n")
                except Exception as e:
                    deposit_analysis = ""
            else:
                profile_text += "\n"
            profile_text += f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã: {'–î–∞' if has_loans else '–ù–µ—Ç'}"
            if has_loans:
                profile_text += f" ({loans_total or '‚Äî'}‚ÇΩ, {loans_interest or '‚Äî'}% –≥–æ–¥–æ–≤—ã—Ö)\n"
            else:
                profile_text += "\n"
            profile_text += f"‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {'–î–∞' if has_investments else '–ù–µ—Ç'}"
            if has_investments:
                profile_text += f" ({investments_amount or '‚Äî'}‚ÇΩ, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {investments_profit or '‚Äî'}%)\n"
            else:
                profile_text += "\n"
            profile_text += f"‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {financial_mood or '‚Äî'}\n\n"
        # –ë–∞–ª–∞–Ω—Å
        cursor = await db.execute("SELECT SUM(CASE WHEN type='income' THEN amount ELSE -amount END) FROM transactions WHERE user_id=?", (user_id,))
        row = await cursor.fetchone()
        balance = row[0] if row and row[0] is not None else 0
        # –¶–µ–ª–∏
        cursor = await db.execute("SELECT goal_name, target_amount, current_amount, deadline, period, strategy_value, priority FROM goals WHERE user_id=?", (user_id,))
        goals = await cursor.fetchall()
        goals_text = ""
        for name, target, current, deadline, period, strategy, prio in goals:
            percent = int(min(100, (current / target) * 100)) if target else 0
            goals_text += f"‚Ä¢ {name}: {current:.0f}/{target:.0f}‚ÇΩ ({percent}%), –¥–æ {deadline}\n"
        # –¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        cursor = await db.execute("SELECT category, SUM(amount) FROM transactions WHERE user_id=? AND type='expense' GROUP BY category ORDER BY SUM(amount) DESC", (user_id,))
        rows = await cursor.fetchall()
        expenses_text = ""
        for cat, amt in rows:
            cat_name = EXPENSE_CATEGORIES.get(cat, cat)
            expenses_text += f"{cat_name}: {amt:.0f}‚ÇΩ\n"
        
        # –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏
        cursor = await db.execute("SELECT age, marital_status, housing, loan, job_category, education, duration, campaign, credit_probability, created_at FROM credit_applications WHERE user_id=? ORDER BY created_at DESC LIMIT 3", (user_id,))
        credit_applications = await cursor.fetchall()
        credit_text = ""
        if credit_applications:
            credit_text = "\n<b>–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n"
            for i, app in enumerate(credit_applications, 1):
                age, marital, housing, loan, job, education, amount, term, prob, date = app
                marital_text = "–ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º" if marital else "–•–æ–ª–æ—Å—Ç/–Ω–µ –∑–∞–º—É–∂–µ–º"
                housing_text = "–î–∞" if housing else "–ù–µ—Ç"
                loan_text = "–î–∞" if loan else "–ù–µ—Ç"
                credit_text += f"{i}. {date[:10]}: {prob}% –æ–¥–æ–±—Ä–µ–Ω–∏—è\n"
                credit_text += f"   –í–æ–∑—Ä–∞—Å—Ç: {age}, {marital_text}, –ñ–∏–ª—å–µ: {housing_text}\n"
                credit_text += f"   –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {job}, –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {education}\n"
                credit_text += f"   –°—É–º–º–∞: {amount:,}‚ÇΩ, –°—Ä–æ–∫: {term} –º–µ—Å.\n\n"
    # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –†–´–ù–ö–ê ---
    def get_market_data_sync():
        crypto = get_crypto_rates()
        us = get_top_us_movers(["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA"], 3)
        ru = get_top_ru_movers(3)
        deposits = get_best_deposits()
        return crypto, us, ru, deposits
    loop = asyncio.get_event_loop()
    with concurrent.futures.ThreadPoolExecutor() as pool:
        crypto, us, ru, deposits = await loop.run_in_executor(pool, get_market_data_sync)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è LLM
    market_text = "\n<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞:</b>\n"
    market_text += "\n<b>–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>\n"
    for c in crypto:
        market_text += f"‚Ä¢ {c['name']}: ${c['usd']} (‚ÇΩ{c['rub']})\n"
    market_text += "\n<b>–¢–æ–ø-3 –∞–∫—Ü–∏–∏ –°–®–ê:</b>\n"
    for ticker, change in us:
        emoji = "üü¢" if change > 0 else "üî¥"
        market_text += f"‚Ä¢ {emoji} {ticker}: {change:+.2f}%\n"
    market_text += "\n<b>–¢–æ–ø-3 –∞–∫—Ü–∏–∏ –†–§:</b>\n"
    for ticker, change in ru:
        emoji = "üü¢" if change > 0 else "üî¥"
        market_text += f"‚Ä¢ {emoji} {ticker}: {change:+.2f}%\n"
    market_text += "\n<b>–õ—É—á—à–∏–µ –≤–∫–ª–∞–¥—ã:</b>\n"
    for d in deposits[:3]:
        market_text += f"‚Ä¢ {d['–ë–∞–Ω–∫']}: {d['–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å']}, {d['–°—Ä–æ–∫']}, –º–∏–Ω. {d['–ú–∏–Ω. —Å—É–º–º–∞']}\n"
    # ---
    context = (
        (profile_text or "") +
        (deposit_analysis or "") +
        f"–ë–∞–ª–∞–Ω—Å: {balance:.2f}‚ÇΩ\n"
        f"–¶–µ–ª–∏:\n{goals_text or '–ù–µ—Ç —Ü–µ–ª–µ–π'}\n"
        f"–¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n{expenses_text or '–ù–µ—Ç —Ç—Ä–∞—Ç'}\n"
        + credit_text
        + market_text
    )
    return context 