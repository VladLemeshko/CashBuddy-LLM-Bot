from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

def get_goals_inline_keyboard(goals):
    keyboard = [
        [InlineKeyboardButton(text=goal, callback_data=f"goal_select:{goal}")]
        for goal in goals
    ]
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="goal_cancel")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_deposit_quick_inline_kb(rec):
    keyboard = [
        [InlineKeyboardButton(text=f"{rec:.2f}", callback_data=f"deposit:{rec:.2f}")],
        [
            InlineKeyboardButton(text=f"{rec/2:.2f}", callback_data=f"deposit:{rec/2:.2f}"),
            InlineKeyboardButton(text="–°–≤–æ—è —Å—É–º–º–∞", callback_data="deposit:custom")
        ],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="deposit:cancel")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_progress_bar(percent, length=20):
    filled = round(percent / 100 * length)
    return "‚ñì" * filled + "‚ñë" * (length - filled)

def get_goals_delete_inline_keyboard(goals):
    keyboard = [
        [InlineKeyboardButton(text=f"üóë {goal}", callback_data=f"goal_delete:{goal}")]
        for goal in goals
    ]
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="goal_cancel")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_goals_edit_inline_keyboard(goals):
    keyboard = [
        [InlineKeyboardButton(text=f"‚úèÔ∏è {goal}", callback_data=f"goal_edit:{goal}")]
        for goal in goals
    ]
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="goal_cancel")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_confirm_inline_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_yes"),
         InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm_no")]
    ])

def format_goal_pretty(name, current, target, deadline, period, strategy_value, priority=None, idx=None):
    left = target - current
    prio_emoji = {1: 'üåü', 2: '‚≠êÔ∏è', 3: 'üèÜ'}.get(priority, '')
    period_emoji = {'–µ–∂–µ–¥–Ω–µ–≤–Ω–æ': 'üóìÔ∏è/–¥–µ–Ω—å', '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ': 'üóìÔ∏è/–Ω–µ–¥', '–µ–∂–µ–º–µ—Å—è—á–Ω–æ': 'üóìÔ∏è/–º–µ—Å'}
    period_str = period_emoji.get(period.lower(), period)
    num = f"{idx}. " if idx is not None else ""
    # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
    try:
        days_left = (datetime.strptime(deadline, "%Y-%m-%d") - datetime.now()).days
        if days_left < 0:
            deadline_str = "‚è≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        else:
            deadline_str = f"‚è≥ {days_left} –¥–Ω."
    except Exception:
        deadline_str = deadline
    text = f"{num}<b>{name}</b> {prio_emoji}\n"
    text += f"   ‚îî –û—Å—Ç–∞–ª–æ—Å—å: <b>{left:,.0f}‚ÇΩ</b> –∏–∑ <b>{target:,.0f}‚ÇΩ</b>\n"
    text += f"   ‚îî {deadline_str} | üí∏ <b>{strategy_value:,.0f}‚ÇΩ</b> {period_str}"
    return text

def get_goals_action_inline_keyboard(goals):
    keyboard = [
        [InlineKeyboardButton(text=f"{goal}", callback_data=f"goal_action:{goal}")]
        for goal in goals
    ]
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="goal_cancel")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_goal_manage_inline_keyboard(goal_name):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"goal_manage:deposit:{goal_name}"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"goal_manage:edit:{goal_name}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"goal_manage:delete:{goal_name}")
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="goal_manage:back")]
    ])

def get_goal_edit_field_inline_keyboard(goal_name):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_goal_field:name"),
            InlineKeyboardButton(text="–î–µ–¥–ª–∞–π–Ω", callback_data="edit_goal_field:deadline"),
            InlineKeyboardButton(text="–°—É–º–º–∞", callback_data="edit_goal_field:amount")
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"goal_action:{goal_name}")]
    ])

def get_goals_list_inline_keyboard(goals):
    keyboard = []
    for goal in goals:
        name, target_amount, current_amount, deadline, period, strategy_value, priority = goal
        try:
            days_left = (datetime.strptime(deadline, "%Y-%m-%d") - datetime.now()).days
            if days_left < 0:
                days_str = "‚è≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            else:
                days_str = f"‚è≥ {days_left} –¥–Ω."
        except Exception:
            days_str = deadline
        percent = int(min(100, (current_amount / target_amount) * 100)) if target_amount else 0
        btn_text = f"{name} | {days_str} | {percent}%"
        keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=f"goal_action:{name}")])
    keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å", callback_data="goal_add_new")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard) 